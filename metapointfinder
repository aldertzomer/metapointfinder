#!/bin/bash
# run as ./metapointfinder file.fastq

#check dependencies
cat dependencies |while read program ; do 
#    hash "$program" 2>/dev/null || { echo "Script requires "$program" but it's not installed. Aborting."; exit 1; }
    if command -v $program > /dev/null ; then 
	exit 0
    else 
	echo "Required depenency $program not installed"
	exit 1
    fi
done

#catch error and kill script
if [[ $? -eq 0 ]]; then
    echo
else
    exit 1
fi

# check R dependencies
R -e "stopifnot(2 == length(find.package(c('msa', 'Biostrings' ))))" --slave
#catch error and kill script
if [[ $? -eq 0 ]]; then
    echo
else
    echo "R package msa and/or Biostrings not installed"
    exit 1
fi

#check if arguments are supplied
if [[ $# -eq 0 ]] ; then
    echo "No fastq file supplied"
    echo "usage: ./metapointfinder file.fastq or ./metapointfinder file.fastq.gz"
    echo ""
    exit 1
fi


#check if input exists
if ! test -f "$1"; then
    echo "File "$1" not found!"
    echo "usage: ./metapointfinder file.fastq or ./metapointfinder file.fastq.gz"
    echo ""
    exit 1
fi

#unzip file if necessary and assign sample variable
if [[ $1 =~ \.gz$ ]]; then
    sample=`echo "$1" |sed 's/.fastq.gz//'`
    zcat $1 > $sample.fastq
else
    sample=`echo "$1" |sed 's/.fastq//'`
fi


#get the databases
if ! test -f AMRProt.fa; then
    echo "downloading https://ftp.ncbi.nlm.nih.gov/pathogen/Antimicrobial_resistance/AMRFinderPlus/database/latest/AMRProt.fa"
    wget -c https://ftp.ncbi.nlm.nih.gov/pathogen/Antimicrobial_resistance/AMRFinderPlus/database/latest/AMRProt.fa
fi

if ! test -f AMRProt-mutation.tsv; then
    echo "downloading https://ftp.ncbi.nlm.nih.gov/pathogen/Antimicrobial_resistance/AMRFinderPlus/database/latest/AMRProt-mutation.tsv"
    wget -c https://ftp.ncbi.nlm.nih.gov/pathogen/Antimicrobial_resistance/AMRFinderPlus/database/latest/AMRProt-mutation.tsv
fi

#replace slashes by underscores
cat AMRProt-mutation.tsv  |sed 's/\//_/g' > AMRProt-mutation_underscore.tsv

#remove this line and replace class with a file with only the AB class or accession you want to check
cat AMRProt-mutation_underscore.tsv |cut -f 6 |sort |uniq > class
cat AMRProt-mutation_underscore.tsv |cut -f 2 |sort |uniq > accession

#prep database
if ! test -f AMRProt-mutation_underscore_combined.tsv; then
# this loop combines all the mutations in one line per protein per class. only needs to be done once
echo "Prepping AMRProt mutation database"
cat class |while read class ; do
    cat accession |while read accession; do 
	cat AMRProt-mutation_underscore.tsv |cut -f 2,4,6 |grep -w "$class" |grep -w "$accession" |sort -nk 1 |while read accession mutation class ; do
	    mutation_cleaned=`echo "$mutation" |cut -f 2 -d _|sed 's/del/-/g'|sed 's/STOP/-/g'` 
	    changes_str=`echo "$mutation_cleaned"",""$changes_str"`
	    echo "$class" "$accession" "$changes_str" |sed 's/,$//'
	done |sed 's/,$//' |tail -n 1|tr " " "\t" >> AMRProt-mutation_underscore_combined.tsv
    done
done
fi

#build the diamond database

if ! test -f AMRProt.dmnd; then 
    echo "Building AMRProt diamond database"
    diamond makedb --in AMRProt.fa --db AMRProt 1>diamondmakedb.log 2>diamondmakedb.error
fi

#align the reads
echo "Aligning reads using diamond blastx"
diamond blastx -d AMRProt -q $sample.fastq -o $sample.hits.txt -F 15 --range-culling -k1 --range-cover 5 --iterate --id 80 --subject-cover 90 --masking 0 --outfmt 6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore full_sseq qseq_translated 1> diamond.log 2> diamond.error

# make the input for R
echo "Parsing diamond output"
echo "class	gene	read	reference	target	changes_str" >$sample.input.tsv
cat $sample.hits.txt  |cut -f 1,2,13,14 |sed "s/|/\t/g" |cut -f 1,3,12,13,14 |while read id accession gene reference target ; do
    cat AMRProt-mutation_underscore_combined.tsv |grep $accession |while read class accession changes ; do
	echo $class $gene $id $reference $target $changes
    done
done | tr " " "\t" >>$sample.input.tsv

#run the R script. Too lazy to do argument parsing with R
echo "Scoring mutations"
cp $sample.input.tsv input.tsv
R --vanilla < score_mutations.R 1> R.log 2>R.error
cp updated_table_with_scores_and_mutations.tsv $sample.updated_table_with_scores_and_mutations.tsv
rm input.tsv
rm updated_table_with_scores_and_mutations.tsv

#quick collation of results
cat D87G_1.updated_table_with_scores_and_mutations.tsv |grep -v None|cut -f 2 |grep -v gene |sort|uniq >gene
echo class WT R |tr " " "\t" >$sample.summary.txt
cat class | while read class ; do
    WT=`cat $sample.updated_table_with_scores_and_mutations.tsv |grep -v class |grep "$class"|cut -f 7 |grep -w 0 |wc -l`
    R=`cat $sample.updated_table_with_scores_and_mutations.tsv |grep -v class |grep "$class"|cut -f 7 |grep -v -w 0 |wc -l`
    echo $class $WT $R |tr " " "\t" >>$sample.summary.txt
    cat gene |while read gene ; do
	WT=`cat $sample.updated_table_with_scores_and_mutations.tsv |grep -v class |grep "$class"|fgrep "$gene" |cut -f 7 |grep -w 0 |wc -l`
	R=`cat $sample.updated_table_with_scores_and_mutations.tsv |grep -v class |grep "$class"|fgrep "$gene" |cut -f 7 |grep -v -w 0 |wc -l`
	echo "$class"."$gene" $WT $R |tr " " "\t" |grep -v "0	0">>$sample.summary.txt
    done
done

#report
echo
if test -f "$sample.updated_table_with_scores_and_mutations.tsv"; then
    echo "Read classification output can be found in the file $sample.updated_table_with_scores_and_mutations.tsv"
else
    echo "Read classification output not generated. Something went wrong"
    exit 1
fi

if test -f "$sample.summary.txt"; then
    echo "Summary of classification output can be found in the file $sample.summary.txt"
    echo
    exit 0
else
    echo "Summary output not generated. Something went wrong"
    exit 1
fi

